use std::str::FromStr;
use crate::ast as ast;
use crate::ast::Identifier;
use crate::ast::ImportHeader;
use crate::ast::ImportHeader2;

grammar;

pub ImportList: Vec<ImportHeader> = {
    => Vec::new(),
    <mut xs: ImportList> <x: ImportHeader> => {
        xs.push(x);
        xs
    }
}

pub ImportHeader: ImportHeader = {
    <ImportHeader2> ";",
    <ImportHeader2>,
}

pub ImportHeader2: ImportHeader = {
    <ImportHeader3>,
    <mut r:ImportHeader4> "as" <id:Id> => {
        r.rest_op = Some(ImportHeader2::ImportAlias(id));
        r
    },
}

pub ImportHeader3: ImportHeader = {
    <mut r:ImportHeader5> "*" => {
        r.rest_op = Some(ImportHeader2::ImportAll);
        r
    },
    <ImportHeader4>,
}

pub ImportHeader4: ImportHeader = {
    <mut r:ImportHeader5> <id:SimpleIdentifier> => {
        r.identifier.parts.push(id);
        r
    },
}

pub ImportHeader5: ImportHeader = {
    <ImportHeader6> ".",
    <ImportHeader4> ".",
}

pub ImportHeader6: ImportHeader = {
    "import" <id:SimpleIdentifier> => ImportHeader {
        identifier: Identifier {
            parts: vec![id],
        },
        rest_op: None
    },
}

pub Parameter: ast::Parameter = {
    <name:SimpleIdentifier> <type_:Type> => ast::Parameter {
        name,
        type_,
    }
}

pub Identifier: Identifier = {
    <id:SimpleIdentifier> => Identifier { parts: vec![id] },
    <mut ids:Identifier> "." <id:SimpleIdentifier> => {
        ids.parts.push(id);
        ids
    }
}

pub Type: Box<ast::Type> = {
    <m:TypeModifier*> <rest:Type2> => {
        Box::new(ast::Type {
            type_modifiers: m,
            rest,
        })
    }
}

pub TypeModifiers: Vec<ast::TypeModifier> = {
    => Vec::new(),
    <mut xs:TypeModifiers> <x:TypeModifier> => {
        xs.push(x);
        xs
    },
}

pub Type2: ast::Type2 = {
    "(" <t:Type> ")" => ast::Type2::ParenthesizedType(t),
    "(" <t:Type> ")" "?"+ => ast::Type2::NullableType(ast::NullableType::ParenthesizedType(t)),
    <t:TypeReference> => ast::Type2::TypeReference(t),
    <t:TypeReference> "?"+ => ast::Type2::NullableType(ast::NullableType::TypeReference(t)),
}

pub TypeModifier: ast::TypeModifier = {
    <x: Annotation> => ast::TypeModifier::Annotation(x),
    "suspend" => ast::TypeModifier::Suspend,
}

pub TypeReference: ast::TypeReference = {
    <t:UserType> => ast::TypeReference::UserType(t),
    "dynamic" => ast::TypeReference::Dynamic,
}

pub UserType: ast::UserType = {
    <t:SimpleUserType> => ast::UserType {
        parts: vec![t],
    },
    <mut xs:UserType> "." <t:SimpleUserType> => {
        xs.parts.push(t);
        xs
    }
}

pub SimpleUserType: ast::SimpleUserType = {
    <n:SimpleIdentifierNoDynamic> => ast::SimpleUserType {
        name: n,
        type_arguments: Vec::new(),
    },
    <n:SimpleIdentifierNoDynamic> <t:TypeArguments> => ast::SimpleUserType {
        name: n,
        type_arguments: t,
    }
}

pub TypeArguments: Vec<ast::TypeProjection> = {
    <r:TypeArguments2> ">" => r,
    <r:TypeArguments2> "," ">" => r,
    "<" ">" => Vec::new(),
    "<" "," ">" => Vec::new(),
}

TypeArguments2: Vec<ast::TypeProjection> = {
    <mut xs:TypeArguments3> <m:TypeProjectionModifier*> <t:Type2> => {
        xs.push(ast::TypeProjection::TypeProjection(ast::TypeProjection2 {
            type_projection_modifiers: m,
            type_: Box::new(ast::Type {
                type_modifiers: Vec::new(),
                rest: t,
            }),
        }));
        xs
    },
    <mut xs:TypeArguments3> "*" => {
        xs.push(ast::TypeProjection::Star);
        xs
    }
}

TypeArguments3: Vec<ast::TypeProjection> = {
    "<" => Vec::new(),
    <r:TypeArguments2> "," => r,
}

pub TypeProjectionModifier: ast::TypeProjectionModifier = {
    <x: VarianceModifier> => ast::TypeProjectionModifier::VarianceModifier(x),
    <x: Annotation> => ast::TypeProjectionModifier::Annotation(x),
}

//pub FunctionType: ast::FunctionType = {
//    <rt: (<ReceiverType> ".")?> <ts: FunctionTypeParameters> => ast::FunctionType {
//        receiver_type_op: rt,
//        type_parameters: ts,
//    }
//}

pub FunctionTypeParameters: Vec<ast::FunctionTypeParameter> = {
    "(" <mut ps:(<FunctionTypeParameter> ",")*> <p:FunctionTypeParameter?> ")" =>
        match p {
            None => ps,
            Some(p) => {
                ps.push(p);
                ps
            }
        }
}

pub FunctionTypeParameter: ast::FunctionTypeParameter = {
    <p:Parameter> => ast::FunctionTypeParameter::Parameter(p),
    <t:Type2> => ast::FunctionTypeParameter::Type(Box::new(ast::Type {
        type_modifiers: Vec::new(),
        rest: t,
    })),
}

pub ReceiverType: ast::ReceiverType = {
    <ms: TypeModifier*> <t: ReceiverType2> => ast::ReceiverType {
        type_modifiers: ms,
        rest: t,
    }
}

pub ReceiverType2: ast::ReceiverType2 = {
    "(" <t:Type> ")" => ast::ReceiverType2::ParenthesizedType(t),
    "(" <t:Type> ")" "?"+ => ast::ReceiverType2::NullableType(ast::NullableType::ParenthesizedType(t)),
    <t:TypeReference> => ast::ReceiverType2::TypeReference(t),
    <t:TypeReference> "?"+ => ast::ReceiverType2::NullableType(ast::NullableType::TypeReference(t)),
}

pub VarianceModifier: ast::VarianceModifier = {
    "in" => ast::VarianceModifier::In,
    "out" => ast::VarianceModifier::Out,
}

pub ReificationModifier: ast::ReificationModifier = {
    "reified" => ast::ReificationModifier::Reified,
}

pub Annotation: ast::Annotation = {
    <SingleAnnotation> => ast::Annotation::Todo,
    <MultiAnnotation> => ast::Annotation::Todo,
}

pub SingleAnnotation: () = {
    <MultiAnnotation2> <UnescapedAnnotation> => (),
}

pub MultiAnnotation: () = {
    <MultiAnnotation2> "[" <UnescapedAnnotation+> "]" => (),
}

pub MultiAnnotation2: () = {
    <UnescapedAnnotation> => (),
    "@"
}

pub AnnotationUseSiteTarget: ast::AnnotationUseSiteTarget = {
    "@" "field" ":" => ast::AnnotationUseSiteTarget::Field,
    "@" "property" ":" => ast::AnnotationUseSiteTarget::Property,
    "@" "get" ":" => ast::AnnotationUseSiteTarget::Get,
    "@" "set" ":" => ast::AnnotationUseSiteTarget::Set,
    "@" "receiver" ":" => ast::AnnotationUseSiteTarget::Receiver,
    "@" "param" ":" => ast::AnnotationUseSiteTarget::Param,
    "@" "setparam" ":" => ast::AnnotationUseSiteTarget::Setparam,
    "@" "delegate" ":" => ast::AnnotationUseSiteTarget::Delegate,
}

pub UnescapedAnnotation: () = {
    "todo3" => (),
}

Statement: () = {
    <LabelsAndAnnotations> => (),
}

LabelsAndAnnotations: () = {
    <Label> => (),
    <Annotation> => (),
    <LabelsAndAnnotations> <Label> => (),
    <LabelsAndAnnotations> <Annotation> => (),
}

Label: () = {
    <SimpleIdentifier> "@" => (),
}

pub SimpleIdentifier: String = {
    <id:Id> => id,
    "abstract" => "abstract".to_owned(),
    "annotation" => "annotation".to_owned(),
    "by" => "by".to_owned(),
    "catch" => "catch".to_owned(),
    "companion" => "companion".to_owned(),
    "constructor" => "constructor".to_owned(),
    "crossinline" => "crossinline".to_owned(),
    "data" => "data".to_owned(),
    "dynamic" => "dynamic".to_owned(),
    "enum" => "enum".to_owned(),
    "external" => "external".to_owned(),
    "final" => "final".to_owned(),
    "finally" => "finally".to_owned(),
    "get" => "get".to_owned(),
    "import" => "import".to_owned(),
    "infix" => "infix".to_owned(),
    "init" => "init".to_owned(),
    "inline" => "inline".to_owned(),
    "inner" => "inner".to_owned(),
    "internal" => "internal".to_owned(),
    "lateinit" => "lateinit".to_owned(),
    "noinline" => "noinline".to_owned(),
    "open" => "open".to_owned(),
    "operator" => "operator".to_owned(),
    "out" => "out".to_owned(),
    "override" => "override".to_owned(),
    "private" => "private".to_owned(),
    "protected" => "protected".to_owned(),
    "public" => "public".to_owned(),
    "reified" => "reified".to_owned(),
    "sealed" => "sealed".to_owned(),
    "tailrec" => "tailrec".to_owned(),
    "set" => "set".to_owned(),
    "vararg" => "vararg".to_owned(),
    "where" => "where".to_owned(),
    "field" => "field".to_owned(),
    "property" => "property".to_owned(),
    "receiver" => "receiver".to_owned(),
    "param" => "param".to_owned(),
    "setparam" => "setparam".to_owned(),
    "delegate" => "delegate".to_owned(),
    "file" => "file".to_owned(),
    "expect" => "expect".to_owned(),
    "actual" => "actual".to_owned(),
    "const" => "const".to_owned(),
    "suspend" => "suspend".to_owned(),
    "value" => "value".to_owned(),
}

pub SimpleIdentifierNoDynamic: String = {
    <id:Id> => id,
    "abstract" => "abstract".to_owned(),
    "annotation" => "annotation".to_owned(),
    "by" => "by".to_owned(),
    "catch" => "catch".to_owned(),
    "companion" => "companion".to_owned(),
    "constructor" => "constructor".to_owned(),
    "crossinline" => "crossinline".to_owned(),
    "data" => "data".to_owned(),
    "enum" => "enum".to_owned(),
    "external" => "external".to_owned(),
    "final" => "final".to_owned(),
    "finally" => "finally".to_owned(),
    "get" => "get".to_owned(),
    "import" => "import".to_owned(),
    "infix" => "infix".to_owned(),
    "init" => "init".to_owned(),
    "inline" => "inline".to_owned(),
    "inner" => "inner".to_owned(),
    "internal" => "internal".to_owned(),
    "lateinit" => "lateinit".to_owned(),
    "noinline" => "noinline".to_owned(),
    "open" => "open".to_owned(),
    "operator" => "operator".to_owned(),
    "out" => "out".to_owned(),
    "override" => "override".to_owned(),
    "private" => "private".to_owned(),
    "protected" => "protected".to_owned(),
    "public" => "public".to_owned(),
    "reified" => "reified".to_owned(),
    "sealed" => "sealed".to_owned(),
    "tailrec" => "tailrec".to_owned(),
    "set" => "set".to_owned(),
    "vararg" => "vararg".to_owned(),
    "where" => "where".to_owned(),
    "field" => "field".to_owned(),
    "property" => "property".to_owned(),
    "receiver" => "receiver".to_owned(),
    "param" => "param".to_owned(),
    "setparam" => "setparam".to_owned(),
    "delegate" => "delegate".to_owned(),
    "file" => "file".to_owned(),
    "expect" => "expect".to_owned(),
    "actual" => "actual".to_owned(),
    "const" => "const".to_owned(),
    "suspend" => "suspend".to_owned(),
    "value" => "value".to_owned(),
}


Id: String = <s:r"([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*"> => s.to_owned();

pub Term: i32 = {
    <n:Num> => n,
    "(" <t:Term> ")" => t,
};

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();
