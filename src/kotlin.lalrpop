use std::str::FromStr;
use crate::ast::Identifier;
use crate::ast::ImportHeader;
use crate::ast::ImportHeader2;

grammar;

pub ImportList: Vec<ImportHeader> = {
    => Vec::new(),
    <mut xs: ImportList> <x: ImportHeader> => {
        xs.push(x);
        xs
    }
}

pub ImportHeader: ImportHeader = {
    <ImportHeader2> ";",
    <ImportHeader2>,
}

pub ImportHeader2: ImportHeader = {
    <ImportHeader3>,
    <mut r:ImportHeader4> "as" <id:Id> => {
        r.rest_op = Some(ImportHeader2::ImportAlias(id));
        r
    },
}

pub ImportHeader3: ImportHeader = {
    <mut r:ImportHeader5> "*" => {
        r.rest_op = Some(ImportHeader2::ImportAll);
        r
    },
    <ImportHeader4>,
}

pub ImportHeader4: ImportHeader = {
    <mut r:ImportHeader5> <id:Id> => {
        r.identifier.parts.push(id);
        r
    },
}

pub ImportHeader5: ImportHeader = {
    <ImportHeader6> ".",
    <ImportHeader4> ".",
}

pub ImportHeader6: ImportHeader = {
    "import" <id:Id> => ImportHeader {
        identifier: Identifier {
            parts: vec![id],
        },
        rest_op: None
    },
}

pub Identifier: Identifier = {
    <id:Id> => Identifier { parts: vec![id] },
    <mut ids:Identifier> "." <id:Id> => {
        ids.parts.push(id);
        ids
    }
}

pub SimpleIdentifier: String = {
    <id:Id> => id,
    "abstract" => "abstract".to_owned(),
    "annotation" => "annotation".to_owned(),
    "by" => "by".to_owned(),
    "catch" => "catch".to_owned(),
    "companion" => "companion".to_owned(),
    "constructor" => "constructor".to_owned(),
    "crossinline" => "crossinline".to_owned(),
    "data" => "data".to_owned(),
    "dynamic" => "dynamic".to_owned(),
    "enum" => "enum".to_owned(),
    "external" => "external".to_owned(),
    "final" => "final".to_owned(),
    "finally" => "finally".to_owned(),
    "get" => "get".to_owned(),
    "import" => "import".to_owned(),
    "infix" => "infix".to_owned(),
    "init" => "init".to_owned(),
    "inline" => "inline".to_owned(),
    "inner" => "inner".to_owned(),
    "internal" => "internal".to_owned(),
    "lateinit" => "lateinit".to_owned(),
    "noinline" => "noinline".to_owned(),
    "open" => "open".to_owned(),
    "operator" => "operator".to_owned(),
    "out" => "out".to_owned(),
    "override" => "override".to_owned(),
    "private" => "private".to_owned(),
    "protected" => "protected".to_owned(),
    "public" => "public".to_owned(),
    "reified" => "reified".to_owned(),
    "sealed" => "sealed".to_owned(),
    "tailrec" => "tailrec".to_owned(),
    "set" => "set".to_owned(),
    "vararg" => "vararg".to_owned(),
    "where" => "where".to_owned(),
    "field" => "field".to_owned(),
    "property" => "property".to_owned(),
    "receiver" => "receiver".to_owned(),
    "param" => "param".to_owned(),
    "setparam" => "setparam".to_owned(),
    "delegate" => "delegate".to_owned(),
    "file" => "file".to_owned(),
    "expect" => "expect".to_owned(),
    "actual" => "actual".to_owned(),
    "const" => "const".to_owned(),
    "suspend" => "suspend".to_owned(),
    "value" => "value".to_owned(),
}

Id: String = <s:r"([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*"> => s.to_owned();

pub Term: i32 = {
    <n:Num> => n,
    "(" <t:Term> ")" => t,
};

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();
